"use client";

import React, { useState, useRef } from 'react';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { X, Upload, Image } from 'lucide-react';

interface CoverImageUploadProps {
  initialImage?: string | null;
  onImageChange: (imageUrl: string | null) => void;
  locale?: string;
}

// Locale-aware translations
function getTranslations(locale: string = 'ru') {
  const translations = {
    ru: {
      coverImage: 'Обложка занятия',
      uploadCoverImage: 'Загрузить обложку',
      dragDropImage: 'Перетащите изображение сюда или нажмите для выбора',
      changeImage: 'Изменить обложку',
      removeImage: 'Удалить обложку',
      uploading: 'Загрузка...',
      autoGenerated: 'Автоматически сгенерировано из видео',
      coverImageDescription: 'Обложка автоматически генерируется из видео. Вы можете изменить её позже, если хотите.',
    },
    en: {
      coverImage: 'Class Cover Image',
      uploadCoverImage: 'Upload Cover Image',
      dragDropImage: 'Drag and drop image here or click to select',
      changeImage: 'Change Cover',
      removeImage: 'Remove Cover',
      uploading: 'Uploading...',
      autoGenerated: 'Auto-generated from video',
      coverImageDescription: 'Cover image is auto-generated from video. You can edit it later if you want.',
    },
    'es-MX': {
      coverImage: 'Imagen de Portada de la Clase',
      uploadCoverImage: 'Subir Imagen de Portada',
      dragDropImage: 'Arrastra y suelta la imagen aquí o haz clic para seleccionar',
      changeImage: 'Cambiar Portada',
      removeImage: 'Eliminar Portada',
      uploading: 'Subiendo...',
      autoGenerated: 'Generado automáticamente del video',
      coverImageDescription: 'La imagen de portada se genera automáticamente del video. Puedes editarla más tarde si quieres.',
    }
  };
  
  return translations[locale as keyof typeof translations] || translations.ru;
}

export function CoverImageUpload({
  initialImage,
  onImageChange,
  locale = 'ru'
}: CoverImageUploadProps) {
  const [isUploading, setIsUploading] = useState(false);
  const [currentImage, setCurrentImage] = useState<string | null>(initialImage || null);
  const [isAutoGenerated, setIsAutoGenerated] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);
  
  const t = getTranslations(locale);

  // Update when initialImage changes (from auto-generation)
  React.useEffect(() => {
    if (initialImage !== currentImage) {
      setCurrentImage(initialImage || null);
      setIsAutoGenerated(!!initialImage);
    }
  }, [initialImage]);

  const handleFileSelect = async (file: File) => {
    if (!file.type.startsWith('image/')) {
      alert('Please select an image file');
      return;
    }

    setIsUploading(true);
    
    try {
      // Create FormData for upload
      const formData = new FormData();
      formData.append('file', file);

      // Upload to your image upload endpoint
      const response = await fetch('/api/upload/image', {
        method: 'POST',
        body: formData,
      });

      if (!response.ok) {
        throw new Error('Failed to upload image');
      }

      const data = await response.json();
      const imageUrl = data.url;
      
      setCurrentImage(imageUrl);
      setIsAutoGenerated(false);
      onImageChange(imageUrl);
      
    } catch (error) {
      console.error('Error uploading image:', error);
      alert('Failed to upload image. Please try again.');
    } finally {
      setIsUploading(false);
    }
  };

  const handleFileInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      handleFileSelect(file);
    }
  };

  const handleDrop = (e: React.DragEvent) => {
    e.preventDefault();
    const file = e.dataTransfer.files[0];
    if (file) {
      handleFileSelect(file);
    }
  };

  const handleDragOver = (e: React.DragEvent) => {
    e.preventDefault();
  };

  const handleRemove = () => {
    setCurrentImage(null);
    setIsAutoGenerated(false);
    onImageChange(null);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const triggerFileSelect = () => {
    fileInputRef.current?.click();
  };

  return (
    <div className="space-y-3">
      <Label className="text-sm font-medium">{t.coverImage}</Label>
      <p className="text-xs text-gray-500">{t.coverImageDescription}</p>
      
      {currentImage ? (
        <div className="space-y-3">
          <div className="relative border border-gray-200 rounded-lg overflow-hidden">
            <img
              src={currentImage}
              alt="Cover image"
              className="w-full h-40 object-cover"
            />
            {isAutoGenerated && (
              <div className="absolute top-2 left-2 bg-blue-500/80 text-white text-xs px-2 py-1 rounded">
                {t.autoGenerated}
              </div>
            )}
          </div>
          
          <div className="flex gap-2">
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={triggerFileSelect}
              disabled={isUploading}
              className="flex-1"
            >
              <Upload className="w-4 h-4 mr-2" />
              {isUploading ? t.uploading : t.changeImage}
            </Button>
            
            <Button
              type="button"
              variant="outline"
              size="sm"
              onClick={handleRemove}
              className="text-red-600 hover:text-red-700"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </div>
      ) : (
        <div
          className="border-2 border-dashed border-gray-300 rounded-lg p-6 text-center cursor-pointer hover:border-gray-400 transition-colors"
          onDrop={handleDrop}
          onDragOver={handleDragOver}
          onClick={triggerFileSelect}
        >
          <Image className="w-8 h-8 text-gray-400 mx-auto mb-2" />
          <p className="text-sm text-gray-600 mb-3">{t.dragDropImage}</p>
          
          <Button
            type="button"
            variant="outline"
            size="sm"
            disabled={isUploading}
          >
            <Upload className="w-4 h-4 mr-2" />
            {isUploading ? t.uploading : t.uploadCoverImage}
          </Button>
        </div>
      )}
      
      <input
        ref={fileInputRef}
        type="file"
        accept="image/*"
        onChange={handleFileInputChange}
        className="hidden"
      />
    </div>
  );
}